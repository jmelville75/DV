<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:2d215042-d2d9-4904-9a79-484dfd6a2f1a -->
<metadata name="createResourceProcess" path="/shared/ASAssets/Utilities/generate/helpers/createResourceProcess" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>createResourceProcess:

	The is a helper procedure which is used to manage the creation of the folder and views 
		within the Data Abstraction Best Practices layers.  It is invoked by generateViews().

	Input:
		IN parentLayerType			VARCHAR,		-- The layer type of the parent path.
		IN sourcePath 				VARCHAR(32768),	-- The full source resource path.
		IN sourceType				VARCHAR,		-- The source type.  May be DATA_SOURCE or CONTAINER.
		IN targetPath 				VARCHAR(32768),	-- The target path.  This will always be a path of type CONTAINER.
		IN tableNames 				LONGVARCHAR,	-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.
													--		When NULL, all tables for the schema are introspected.
		IN separator				VARCHAR,		-- Default=,  The separator used to separate lists for the input parameters: tableNames and procedureNames
													--		The separator value should not exist within the table or procedure names.
		IN tablePrefix 				VARCHAR,		-- A value to be prefixed to the table.  If null then no value is prefixed.  e.g. V_
		IN tableQualifier			VARCHAR,		-- A value to be added as a table qualifer.  It goes after the prefix but before the table name.  If null then no value is added.
		IN overwrite				SMALLINT,		-- 1=overwrite the resouce if it exists. 0=do not overwrite the resource.
		IN copyAnnotation			SMALLINT,		-- 1=copy table and column annotations. 0=do not copy
		IN copySqlIndexes			SMALLINT,		-- 1=copy SQL indexes from source to target.  0=do not copy 
		IN copyForeignKeys			SMALLINT,		-- 1=copy foreign keys from source to target.  0=do not copy
		IN inDebug					CHAR(1),		-- Y=debug on, N=debug off, null=N

	Output: 
		OUT numCreated				INTEGER,		-- The number of views created
		OUT numUpdated				INTEGER			-- The number of views updated
		OUT result					PIPE (			-- A cursor of results for each row created or updated
			actionType				VARCHAR,		-- The action taken for this resource:  CREATED, OVERWRITTEN, SKIPPED [EXISTS].
			layerType				VARCHAR,		-- The layer type that the view is being generated in:  METADATA, FORMATTING, BUSINESS, APPLICATION, PUBLISHED.
			resName					VARCHAR,		-- The name of the resource.
			resPath					LONGVARCHAR,	-- The full path to the resource.
			resType					VARCHAR,		-- The type of the resource.
			subtype					VARCHAR,		-- The subtype of the resource.
			parentLineageLayerType	VARCHAR,		-- The layer type of the parent resource according to the lineage.
			parentLineagePath		LONGVARCHAR,	-- The full path of the parent resource according to the lineage.
			metadataLineageName		LONGVARCHAR,	-- Placeholder for generateViews - always null.
			metadataLineagePath		LONGVARCHAR		-- Placeholder for generateViews - always null.
		)

	Exception: may throw exceptions if input is not valid.

	Modified Date:	Modified By:		CSW Version:	Reason:
	04/14/2014		Venky Madireddi		6.2.6			Created new
	01/10/2018		Mike Tinius			7.0.5			Adapted and modified for a more complete view generation.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="parentLayerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="sourcePathIn" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="targetPathIn" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="tableNames" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="separator" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="tablePrefix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="tableQualifier" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="copyAnnotation" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="copySqlIndexes" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="copyForeignKeys" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="inDebug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="numCreated" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numUpdated" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="actionType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="layerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="resType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentLineageLayerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentLineagePath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="metadataLineageName">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="metadataLineagePath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ EXECUTE"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="MessageValue" type="STRING" maxLength="64000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResourceAnnotations" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inSourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="inDestPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inDestType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResourcesPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="copyPrivilegeEntry" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="copyPrivilegeEntryType" type="TREE" refId="2">
              <element name="srcResource">
                <datatype name="srcResource" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="resourceType" type="TREE" refId="3">
                      <element name="path">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
                      </element>
                      <element name="type">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="dstResource">
                <datatype name="dstResource" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="4"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFoldersPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE_FOREIGNKEYS" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="primaryKeyName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="primaryKeyTable">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="foreignKeyColumnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="primaryKeyColumnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE_SQLINDEXES" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="sqlIndexName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexUnique">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlIndexColName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexColOrder">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListChildren" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/publishResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="publishFolder" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="publishName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="publishResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateResourcesSqlTable" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
      </element>
      <element name="inScripttext" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnList" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="childResourceType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="childResourceType" type="TREE" refId="2">
              <element name="resourceName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourcePath">
                <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
              </element>
              <element name="resourceType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="columnName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="columnType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="annotation">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="sqlIndexList" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="sqlIndexType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="sqlIndexType" type="TREE" refId="3">
              <element name="sqlIndexName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="sqlIndexType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="sqlIndexUnique">
                <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
              <element name="sqlIndexColName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="sqlIndexColOrder">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="foreignKeyList" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="foreignKeyType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="foreignKeyType" type="TREE" refId="4">
              <element name="fkName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="fkPrimaryKeyName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="fkPrimaryKeyTable">
                <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="1000"/>
              </element>
              <element name="fkForeignKeyColumnName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="fkPrimaryKeyColumnName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="5"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="5"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	createResourceProcess:

	The is a helper procedure which is used to manage the creation of the folder and views 
		within the Data Abstraction Best Practices layers.  It is invoked by generateViews().

	Input:
		IN parentLayerType			VARCHAR,		-- The layer type of the parent path.
		IN sourcePath 				VARCHAR(32768),	-- The full source resource path.
		IN sourceType				VARCHAR,		-- The source type.  May be DATA_SOURCE or CONTAINER.
		IN targetPath 				VARCHAR(32768),	-- The target path.  This will always be a path of type CONTAINER.
		IN tableNames 				LONGVARCHAR,	-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.
													--		When NULL, all tables for the schema are introspected.
		IN separator				VARCHAR,		-- Default=,  The separator used to separate lists for the input parameters: tableNames and procedureNames
													--		The separator value should not exist within the table or procedure names.
		IN tablePrefix 				VARCHAR,		-- A value to be prefixed to the table.  If null then no value is prefixed.  e.g. V_
		IN tableQualifier			VARCHAR,		-- A value to be added as a table qualifer.  It goes after the prefix but before the table name.  If null then no value is added.
		IN overwrite				SMALLINT,		-- 1=overwrite the resouce if it exists. 0=do not overwrite the resource.
		IN copyAnnotation			SMALLINT,		-- 1=copy table and column annotations. 0=do not copy
		IN copySqlIndexes			SMALLINT,		-- 1=copy SQL indexes from source to target.  0=do not copy 
		IN copyForeignKeys			SMALLINT,		-- 1=copy foreign keys from source to target.  0=do not copy
		IN inDebug					CHAR(1),		-- Y=debug on, N=debug off, null=N

	Output: 
		OUT numCreated				INTEGER,		-- The number of views created
		OUT numUpdated				INTEGER			-- The number of views updated
		OUT result					PIPE (			-- A cursor of results for each row created or updated
			actionType				VARCHAR,		-- The action taken for this resource:  CREATED, OVERWRITTEN, SKIPPED [EXISTS].
			layerType				VARCHAR,		-- The layer type that the view is being generated in:  METADATA, FORMATTING, BUSINESS, APPLICATION, PUBLISHED.
			resName					VARCHAR,		-- The name of the resource.
			resPath					LONGVARCHAR,	-- The full path to the resource.
			resType					VARCHAR,		-- The type of the resource.
			subtype					VARCHAR,		-- The subtype of the resource.
			parentLineageLayerType	VARCHAR,		-- The layer type of the parent resource according to the lineage.
			parentLineagePath		LONGVARCHAR,	-- The full path of the parent resource according to the lineage.
			metadataLineageName		LONGVARCHAR,	-- Placeholder for generateViews - always null.
			metadataLineagePath		LONGVARCHAR		-- Placeholder for generateViews - always null.
		)

	Exception: may throw exceptions if input is not valid.

	Modified Date:	Modified By:		CSW Version:	Reason:
	04/14/2014		Venky Madireddi		6.2.6			Created new
	01/10/2018		Mike Tinius			7.0.5			Adapted and modified for a more complete view generation.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE createResourceProcess
(
	IN  parentLayerType			VARCHAR,		-- The layer type of the parent path.
	IN  layerType				VARCHAR,		-- The layer type.  e.g. FORMATTING, BUSINESS, APPLICATION, PUBLISHED
	IN  sourcePathIn			LONGVARCHAR,	-- The full source path.
	IN  sourceType				VARCHAR,		-- The source type.  May be DATA_SOURCE or CONTAINER.
	IN  targetPathIn			LONGVARCHAR,	-- The target path.  This will always be a path of type CONTAINER.
	IN  tableNames 				LONGVARCHAR,	-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.
												--		When NULL, all tables for the schema are introspected.
	IN	separator				VARCHAR,		-- Default=,  The separator used to separate lists for the input parameters: tableNames and procedureNames
												--		The separator value should not exist within the table or procedure names.
	IN  tablePrefix 			VARCHAR,		-- A value to be prefixed to the table.  If null then no value is prefixed.  e.g. V_
	IN  tableQualifier			VARCHAR,		-- A value to be added as a table qualifer.  It goes after the prefix but before the table name.  If null then no value is added.
	IN  overwrite				SMALLINT,		-- 1=overwrite the resouce if it exists. 0=do not overwrite the resource.
	IN  copyAnnotation			SMALLINT,		-- 1=copy table and column annotations. 0=do not copy
	IN  copySqlIndexes			SMALLINT,		-- 1=copy SQL indexes from source to target.  0=do not copy 
	IN  copyForeignKeys			SMALLINT,		-- 1=copy foreign keys from source to target.  0=do not copy
	IN  inDebug					CHAR(1),		-- Y=debug on, N=debug off, null=N
	OUT numCreated				INTEGER,		-- Number of new views created
	OUT numUpdated				INTEGER,		-- Numbrer of existing views updated
	OUT result					PIPE (			-- A cursor of results for each row created or updated
		actionType				VARCHAR,		-- The action taken for this resource:  CREATED, OVERWRITTEN, SKIPPED [EXISTS].
		layerType				VARCHAR,		-- The layer type that the view is being generated in:  METADATA, FORMATTING, BUSINESS, APPLICATION, PUBLISHED.
		resName					VARCHAR,		-- The name of the resource.
		resPath					LONGVARCHAR,	-- The full path to the resource.
		resType					VARCHAR,		-- The type of the resource.
		subtype					VARCHAR,		-- The subtype of the resource.
		parentLineageLayerType	VARCHAR,		-- The layer type of the parent resource according to the lineage.
		parentLineagePath		LONGVARCHAR,	-- The full path of the parent resource according to the lineage.
		metadataLineageName		LONGVARCHAR,	-- Placeholder for generateViews - always null.
		metadataLineagePath		LONGVARCHAR		-- Placeholder for generateViews - always null.
	)
)
BEGIN
	DECLARE moduleName					VARCHAR DEFAULT &apos;createResourceProcess&apos;;
	DECLARE debug						CHAR(1) DEFAULT NVL(UPPER(inDebug), &apos;N&apos;);
	DECLARE sep							VARCHAR DEFAULT NVL(separator, &apos;,&apos;);
	DECLARE sourcePath					LONGVARCHAR DEFAULT TRIM(sourcePathIn);
	DECLARE targetPath					LONGVARCHAR DEFAULT TRIM(targetPathIn);
	DECLARE ScriptUpdatePath			VARCHAR(32768);
	DECLARE SQLScript 					VARCHAR(32768);
	DECLARE Res_Target_Full_Path_Name 	VARCHAR(32768);
	DECLARE Res_Name					VARCHAR;
	DECLARE Resource_Exists 			BOOLEAN;
	DECLARE Table_Names					LONGVARCHAR DEFAULT null;
	DECLARE Tab_Prefix 					VARCHAR DEFAULT &apos;&apos;;
	DECLARE Tab_Qualifier				VARCHAR DEFAULT &apos;&apos;;
	DECLARE i							INTEGER;
	DECLARE copyPrivilegeEntry			/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.copyPrivilegeEntryVector;
	DECLARE sqlIndexVect				VECTOR(/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.sqlIndexType);
	DECLARE foreignKeyVect				VECTOR(/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.foreignKeyType);
	DECLARE success						INTEGER;
	DECLARE createResponse 				XML;
	DECLARE faultResponse 				XML;
	DECLARE ex							EXCEPTION;
	DECLARE TYPE resultType				ROW (			-- A row type to capture results for each row created or updated
		actionType						VARCHAR,		-- The action taken for this resource:  CREATED, OVERWRITTEN, SKIPPED [EXISTS].
		layerType						VARCHAR,		-- The layer type that the view is being generated in:  METADATA, FORMATTING, BUSINESS, APPLICATION, PUBLISHED.
		resName							VARCHAR,		-- The name of the resource.
		resPath							LONGVARCHAR,	-- The full path to the resource.
		resType							VARCHAR,		-- The type of the resource.
		subtype							VARCHAR,		-- The subtype of the resource.
		parentLineageLayerType			VARCHAR,		-- The layer type of the parent resource according to the lineage.
		parentLineagePath				LONGVARCHAR,	-- The full path of the parent resource according to the lineage.
		metadataLineageName				LONGVARCHAR,	-- Placeholder for generateViews - always null.
		metadataLineagePath				LONGVARCHAR		-- Placeholder for generateViews - always null.
	);
	DECLARE resultRec					resultType;

	-- Remove any white space and / at the end if exists.
	IF (SUBSTRING(sourcePath, LENGTH(sourcePath), 1) = &apos;/&apos;) THEN
		SET sourcePath = SUBSTRING(sourcePath, 1, LENGTH(sourcePath)-1);
	END IF;
	-- Remove any white space and / at the end if exists.
	IF (SUBSTRING(targetPath, LENGTH(targetPath), 1) = &apos;/&apos;) THEN
		SET targetPath = SUBSTRING(targetPath, 1, LENGTH(targetPath)-1);
	END IF;
	-- Set default values
	SET numCreated = 0;
	SET numUpdated = 0;
	-- Enclose the table name list with separators on each side for searching purposes
	IF (tableNames IS NOT NULL AND LENGTH(tableNames) &gt; 0) THEN
		SET Table_Names = sep||tableNames||sep;
	END IF;

	-- Assign the table prefix
	IF tablePrefix is not null THEN
		SET Tab_Prefix = tablePrefix;
	END IF;
	-- Assign the table qualifer
	IF tableQualifier is not null THEN
		SET Tab_Qualifier = tableQualifier;
	END IF;

	IF (debug = &apos;Y&apos;) THEN
		CALL PRINT (moduleName||&apos; : &apos;||&apos;  INPUT:&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    SOURCE PATH=[&apos;||NVL(sourcePath,&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    SOURCE TYPE=[&apos;||NVL(sourceType,&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    TARTGET PATH=[&apos;||NVL(targetPath,&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    TABLENAMES=[&apos;||NVL(tableNames,&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    SEPARATOR=[&apos;||NVL(sep,&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    PREFIX=[&apos;||NVL(tablePrefix,&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    QUALIFIER=[&apos;||NVL(tableQualifier,&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    OVERWRITRE=[&apos;||NVL(CAST(overwrite AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    COPY ANNOTATION=[&apos;||NVL(CAST(copyAnnotation AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    COPY SQL INDEXES=[&apos;||NVL(CAST(copySqlIndexes AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT (moduleName||&apos; : &apos;||&apos;    COPY FOREIGN KEYS=[&apos;||NVL(CAST(copyForeignKeys AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
	END IF;

	-- Check to see if the target path exists
	CALL /lib/resource/ResourceExists(targetPath, &apos;CONTAINER&apos;, null, Resource_Exists);
	IF (NOT Resource_Exists) THEN 
		BEGIN INDEPENDENT TRANSACTION
			CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(targetPath, 1, 1, success, faultResponse);
		EXCEPTION
			ELSE
				RAISE;
		END;
	END IF;

	-- Loop through the source path resources and create them in the target path
	FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceListChildren(sourcePath, sourceType) DO
		--CALL PRINT (moduleName||&apos; :     &apos;||r.name ||&apos; DISCOVERED&apos;);

		-- If the resource is a table and the resource is in the table list or the table list is null then generate the view
		IF (r.resType = &apos;TABLE&apos; AND ((Table_Names IS NOT NULL AND INSTR(Table_Names, sep||r.name||sep) &gt; 0) OR (Table_Names IS NULL))) THEN
			SET Res_Target_Full_Path_Name = targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name;
			SET resultRec.resName = Tab_Prefix||Tab_Qualifier||r.name;
			SET resultRec.resPath = Res_Target_Full_Path_Name;
			SET resultRec.actionType = &apos;UNKNOWN&apos;;
			SET resultRec.layerType = layerType;
			SET resultRec.parentLineageLayerType = parentLayerType;
			SET resultRec.parentLineagePath = sourcePath||&apos;/&apos;||r.name;
			SET resultRec.metadataLineageName = null;
			SET resultRec.metadataLineagePath = null;

			-- Determine if the target resource is to be published
			IF (INSTR(Res_Target_Full_Path_Name, &apos;/services/databases/&apos;) &gt; 0) THEN
				SET resultRec.resType = &apos;LINK&apos;;
				SET resultRec.subtype = &apos;NONE&apos;;

				-- Verify if the resources exists
				CALL /lib/resource/ResourceExists(Res_Target_Full_Path_Name, &apos;LINK&apos;, null, Resource_Exists);
				IF (NOT Resource_Exists OR (Resource_Exists AND overwrite = 1)) THEN 
					IF (NOT Resource_Exists) THEN
						set numCreated = numCreated + 1;
					ELSE
						set numUpdated = numUpdated + 1;
					END IF;
					IF (Resource_Exists and overwrite = 1) THEN
						BEGIN INDEPENDENT TRANSACTION
							call /shared/ASAssets/Utilities/repository/destroyResource(targetPath,Tab_Prefix||Tab_Qualifier||r.name,&apos;LINK&apos;,success,createResponse,faultResponse);
							IF (faultResponse is not null) THEN
								raise ex value  moduleName||&apos;: &apos;||CAST(faultResponse AS LONGVARCHAR);
							END IF;
						EXCEPTION
							ELSE
								RAISE;
						END;
					END IF;
					-- Create the published resource link
					BEGIN INDEPENDENT TRANSACTION
						call /shared/ASAssets/Utilities/repository/publishResource(r.resPath, r.resType, targetPath, Tab_Prefix||Tab_Qualifier||r.name, null, success, createResponse, faultResponse);
						IF (faultResponse is not null) THEN
							raise ex value moduleName||&apos;: &apos;||CAST(faultResponse AS LONGVARCHAR);
						END IF;

						-- Set the privileges on the resource using the parent folder privileges
						set copyPrivilegeEntry = VECTOR[(
								VECTOR[(targetPath,&apos;CONTAINER&apos;)],
								VECTOR[(targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name,&apos;LINK&apos;)]
							)];
						-- Invoke the procedure to apply privileges
						--		param1=updatePrivilegesRecursively, param2=copyPrivilegeMode, param3=copyPrivilegeEntry vectory
						call /shared/ASAssets/Utilities/repository/copyResourcesPrivileges(0, 1, copyPrivilegeEntry, success, faultResponse);
					EXCEPTION
						ELSE
							RAISE;
					END;

					BEGIN INDEPENDENT TRANSACTION
						-- Copy the table annotation
						IF (copyAnnotation IS NOT NULL AND copyAnnotation = 1) THEN
							call /shared/ASAssets/Utilities/repository/copyResourceAnnotations(sourcePath||&apos;/&apos;||r.name, r.resType, targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name, &apos;LINK&apos;, success, createResponse, faultResponse);
						END IF;
					EXCEPTION
						ELSE
							RAISE;
					END;

					IF (Resource_Exists AND overwrite = 1) THEN
						SET resultRec.actionType = &apos;OVERWRITTEN&apos;;
					ELSE
						SET resultRec.actionType = &apos;CREATED&apos;;
					END IF;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name ||&apos; &apos;|| resultRec.actionType);
					END IF;
				ELSE
					SET resultRec.actionType = &apos;SKIPPED [EXISTS]&apos;;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name ||&apos; &apos;|| resultRec.actionType);
					END IF;
				END IF;
				INSERT INTO result VALUES (resultRec);
			ELSE
				SET resultRec.resType = &apos;TABLE&apos;;
				SET resultRec.subtype = &apos;SQL_TABLE&apos;;

				-- Verify if the resource exists
				CALL /lib/resource/ResourceExists(Res_Target_Full_Path_Name, r.resType, null, Resource_Exists);
				IF (NOT Resource_Exists OR (Resource_Exists AND overwrite = 1)) THEN 
					IF (NOT Resource_Exists) THEN
						BEGIN INDEPENDENT TRANSACTION
							CALL /shared/ASAssets/Utilities/repository/createResource(targetPath, Tab_Prefix||Tab_Qualifier||r.name, &apos;TABLE&apos;, &apos;SQL_TABLE&apos;,success,createResponse, faultResponse);
						EXCEPTION
							ELSE
								RAISE;
						END;
						set numCreated = numCreated + 1;
					ELSE
						set numUpdated = numUpdated + 1;
					END IF;
					-- Maps the Views with the below Layer table script
					CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name, NULL, ScriptUpdatePath);
					CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(sourcePath||&apos;/&apos;||r.name, NULL, Res_Target_Full_Path_Name);
					SET SQLScript= &apos;select * from &apos; ||Res_Target_Full_Path_Name;

					-- Get the SQL Indexes from the source resource
					BEGIN INDEPENDENT TRANSACTION
						IF (copySqlIndexes IS NOT NULL AND copySqlIndexes = 1) THEN
							SET i = 1;
							SET sqlIndexVect = VECTOR[];
							FOR idx AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE_SQLINDEXES(sourcePath||&apos;/&apos;||r.name, r.resType) DO
								SET sqlIndexVect = EXTEND(sqlIndexVect, 1);
   	             			SET sqlIndexVect[i] = idx;
								IF (debug = &apos;Y&apos;) THEN
									CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name||&apos;  SQL Index i=&apos;||i);
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexName=&apos;||NVL(sqlIndexVect[i].sqlIndexName,&apos;null&apos;));
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexType=&apos;||NVL(sqlIndexVect[i].sqlIndexType,&apos;null&apos;));
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexUnique=&apos;||NVL(CAST(sqlIndexVect[i].sqlIndexUnique AS VARCHAR),&apos;null&apos;));
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexColName=&apos;||NVL(sqlIndexVect[i].sqlIndexColName,&apos;null&apos;));
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexColOrder=&apos;||NVL(sqlIndexVect[i].sqlIndexColOrder,&apos;null&apos;));
								END IF;
								SET i = i + 1;
							END FOR;
						END IF;
					EXCEPTION
						ELSE
							RAISE;
					END;

					-- Get the Foreign Keys from the source resource
					BEGIN INDEPENDENT TRANSACTION
						IF (copyForeignKeys IS NOT NULL AND copyForeignKeys = 1) THEN
							SET i = 1;
							SET foreignKeyVect = VECTOR[];
							FOR fk AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE_FOREIGNKEYS(sourcePath||&apos;/&apos;||r.name, r.resType) DO
								SET foreignKeyVect = EXTEND(foreignKeyVect, 1);
								SET foreignKeyVect[i] = fk;
								SET foreignKeyVect[i].fkPrimaryKeyTable = REPLACE(foreignKeyVect[i].fkPrimaryKeyTable, sourcePath, targetPath);
								IF (debug = &apos;Y&apos;) THEN
									CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name||&apos;  Foreign Key i=&apos;||i);
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkName=&apos;||NVL(foreignKeyVect[i].fkName,&apos;null&apos;));
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkPrimaryKeyName=&apos;||NVL(foreignKeyVect[i].fkPrimaryKeyName,&apos;null&apos;));
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkPrimaryKeyTable=&apos;||NVL(foreignKeyVect[i].fkPrimaryKeyTable,&apos;null&apos;));
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkForeignKeyColumnName=&apos;||NVL(foreignKeyVect[i].fkForeignKeyColumnName,&apos;null&apos;));
									CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkPrimaryKeyColumnName=&apos;||NVL(foreignKeyVect[i].fkPrimaryKeyColumnName,&apos;null&apos;));
								END IF;
								SET i = i + 1;
							END FOR;
						END IF;
					EXCEPTION
						ELSE
							RAISE;
					END;

					-- Update the resource table
					BEGIN INDEPENDENT TRANSACTION
						CALL /shared/ASAssets/Utilities/repository/updateResourcesSqlTable(ScriptUpdatePath, SQLScript, null, null, sqlIndexVect, foreignKeyVect, success, createResponse, faultResponse);
					EXCEPTION
						ELSE
							RAISE;
					END;

					-- Set the privileges on the resource using the parent folder privileges
					BEGIN INDEPENDENT TRANSACTION
						set copyPrivilegeEntry = VECTOR[(
								VECTOR[(targetPath,&apos;CONTAINER&apos;)],
								VECTOR[(targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name,&apos;TABLE&apos;)]
							)];
						-- Invoke the procedure to apply privileges
						--		param1=updatePrivilegesRecursively, param2=copyPrivilegeMode, param3=copyPrivilegeEntry vectory
						call /shared/ASAssets/Utilities/repository/copyResourcesPrivileges(0, 1, copyPrivilegeEntry, success, faultResponse);
					EXCEPTION
						ELSE
							RAISE;
					END;

					-- Copy the table and column annotation
					BEGIN INDEPENDENT TRANSACTION
						IF (copyAnnotation IS NOT NULL AND copyAnnotation = 1) THEN
							call /shared/ASAssets/Utilities/repository/copyResourceAnnotations(sourcePath||&apos;/&apos;||r.name, r.resType, targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name, &apos;TABLE&apos;, success, createResponse, faultResponse);
						END IF;
					EXCEPTION
						ELSE
							RAISE;
					END;

					IF (Resource_Exists AND overwrite = 1) THEN
						SET resultRec.actionType = &apos;OVERWRITTEN&apos;;
					ELSE
						SET resultRec.actionType = &apos;CREATED&apos;;
					END IF;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name ||&apos; &apos;|| resultRec.actionType);
					END IF;
				ELSE
					SET resultRec.actionType = &apos;SKIPPED [EXISTS]&apos;;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name ||&apos; &apos;|| resultRec.actionType);
					END IF;
				END IF;
				INSERT INTO result VALUES (resultRec);
			END IF;
		END IF;
	END FOR;
END</attribute>
  <attribute name="creationDate" type="LONG">1398195366998</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zk5tunx</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1518205210936</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">15/328</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/329</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/304</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/326</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/378</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/305</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/327</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/302</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/159</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/303</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/325</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/158</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/300</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/301</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/259</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/167</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/166</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/165</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/164</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/383</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/169</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/264</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/168</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/330</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/163</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/162</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/161</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/160</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>